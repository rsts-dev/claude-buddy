version: '3'

vars:
  PROJECT_NAME: claude-buddy
  VERSION:
    sh: node -p "require('./package.json').version"
  NODE_VERSION:
    sh: node --version
  DIST_DIR: dist

env:
  NODE_ENV: development
  FORCE_COLOR: "1"

output: prefixed

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  setup:
    desc: Initialize project for development
    deps: [install]
    cmds:
      - echo "Claude Buddy development environment ready!"
      - echo "Version {{.VERSION}}"
      - echo "Node {{.NODE_VERSION}}"

  install:
    desc: Install project dependencies
    internal: true
    cmds:
      - npm ci
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/.package-lock.json

  test:
    desc: Run all tests
    cmds:
      - echo "Testing installation process..."
      - node install.js --help
      - echo "All tests passed!"

  build:
    desc: Build for production
    deps: ["clean:build"]
    cmds:
      - echo "Building Claude Buddy..."
      - mkdir -p {{.DIST_DIR}}
      - cp install.js {{.DIST_DIR}}/
      - cp package.json {{.DIST_DIR}}/
      - cp README.md {{.DIST_DIR}}/
      - cp -r scripts {{.DIST_DIR}}/
      - echo "Build completed in {{.DIST_DIR}}/"

  "clean:build":
    desc: Clean build directory
    internal: true
    cmds:
      - rm -rf {{.DIST_DIR}}

  lint:
    desc: Check and fix code style
    cmds:
      - echo "Linting code..."
      - |
        if command -v eslint >/dev/null || [ -f "node_modules/.bin/eslint" ]; then
          npx eslint src/ --ext .ts --fix --quiet || echo "Linting issues found"
        else
          echo "ESLint not found. Install with: npm install -g eslint"
        fi

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.DIST_DIR}}
      - find . -name "*.log" -delete 2>/dev/null || true
      - echo "Build artifacts cleaned"

  analyze:
    desc: Analyze project structure
    cmds:
      - echo "Project Analysis Report"
      - echo "======================"
      - echo "Version {{.VERSION}}"
      - echo "Node {{.NODE_VERSION}}"
      - echo ""
      - echo "File Counts:"
      - echo "  JavaScript:" $(find . -name "*.js" | wc -l)
      - echo "  Markdown:" $(find . -name "*.md" | wc -l)
      - echo "  JSON:" $(find . -name "*.json" | wc -l)

  "security:audit":
    desc: Check for vulnerabilities
    cmds:
      - echo "Running security audit..."
      - npm audit --audit-level=moderate

  "version:patch":
    desc: Bump patch version
    cmds:
      - npm version patch --no-git-tag-version
      - |
        VERSION=$(node -p "require('./package.json').version")
        git add package.json package-lock.json
        git commit -m "chore: bump version to v$VERSION"
        git push origin main
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"
        echo "Tagged and pushed version v$VERSION"

  "site:deploy":
    desc: Deploy site to GitHub Pages
    cmds:
      - echo "Deploying site to GitHub Pages..."
      - |
        # Create temporary directory
        TEMP_DIR="temp-gh-pages-$(date +%s)"
        echo "Creating temporary directory: $TEMP_DIR"
        
        # Clone gh-pages branch into temp directory
        if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
          echo "Checking out existing gh-pages branch..."
          git clone -b gh-pages --single-branch . "$TEMP_DIR"
        else
          echo "Creating new gh-pages branch..."
          git clone --single-branch . "$TEMP_DIR"
          cd "$TEMP_DIR"
          git checkout --orphan gh-pages
          git rm -rf .
          cd ..
        fi
        
        # Copy site content to temp directory
        echo "Copying site content..."
        cp -r site/* "$TEMP_DIR/"
        
        # Navigate to temp directory and commit
        cd "$TEMP_DIR"
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to deploy"
        else
          echo "Generating commit message with Claude..."
          
          # Generate commit message using Claude
          COMMIT_MSG=$(claude --no-desktop "Analyze the changes in the site/ folder and generate a professional conventional commit message for deploying the website to GitHub Pages. Context: This is a deployment of the Claude Buddy landing page. Changes may include persona updates, content modifications, or design improvements. Use 'feat(site):' as the commit type prefix. Include a brief summary and bullet points of key changes. Add deployment metadata at the end. Generate only the commit message, no additional text." 2>/dev/null || printf "feat(site): deploy website updates\n\n- Updated website content and assets\n- Refreshed landing page with latest changes\n- Deployed static site to GitHub Pages\n\nDeployed from commit \$(git rev-parse --short HEAD) on \$(date)")
          
          echo "Committing changes..."
          git commit -m "$COMMIT_MSG"
          
          echo "Pushing to gh-pages branch..."
          git push origin gh-pages
          echo "Site deployed successfully!"
        fi
        
        # Clean up
        cd ..
        echo "Cleaning up temporary directory..."
        rm -rf "$TEMP_DIR"
        echo "Deployment complete!"

  "update:global":
    desc: Update global claude-buddy npm package
    cmds:
      - echo "Current version:" && claude-buddy --version
      - npm update -g claude-buddy
      - echo "Updated version:" && claude-buddy --version

  help:
    desc: Show detailed help for common workflows
    cmds:
      - |
        echo "Claude Buddy Development Guide"
        echo "=============================="
        echo ""
        echo "Common Workflows:"
        echo "  task setup          - Initialize development environment"
        echo "  task dev            - Start development mode"
        echo "  task test           - Run all tests"
        echo "  task build          - Build for production"
        echo "  task lint           - Check and fix code style"
        echo ""
        echo "Utilities:"
        echo "  task clean          - Clean build artifacts"
        echo "  task analyze        - Analyze project structure"
        echo "  task security:audit - Check for vulnerabilities"
        echo "  task update:global  - Update global claude-buddy package"
        echo ""
        echo "Publishing:"
        echo "  task version:patch  - Bump patch version"
        echo "  task publish:dry    - Test publish process"
        echo "  task publish        - Publish to npm"
        echo ""
        echo "Site Deployment:"
        echo "  task site:deploy    - Deploy site to GitHub Pages"
        echo ""
        echo "For full task list: task --list"